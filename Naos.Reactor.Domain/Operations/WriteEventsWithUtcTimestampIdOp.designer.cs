// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.209.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Reactor.Domain
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Cloning.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class WriteEventsWithUtcTimestampIdOp : IModel<WriteEventsWithUtcTimestampIdOp>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="WriteEventsWithUtcTimestampIdOp"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(WriteEventsWithUtcTimestampIdOp left, WriteEventsWithUtcTimestampIdOp right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="WriteEventsWithUtcTimestampIdOp"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(WriteEventsWithUtcTimestampIdOp left, WriteEventsWithUtcTimestampIdOp right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(WriteEventsWithUtcTimestampIdOp other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.IdPrefix.IsEqualTo(other.IdPrefix, StringComparer.Ordinal)
                      && this.EventsToPut.IsEqualTo(other.EventsToPut);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as WriteEventsWithUtcTimestampIdOp);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.IdPrefix)
            .Hash(this.EventsToPut)
            .Value;

        /// <inheritdoc />
        public new WriteEventsWithUtcTimestampIdOp DeepClone() => (WriteEventsWithUtcTimestampIdOp)this.DeepCloneInternal();

        /// <summary>
        /// Deep clones this object with a new <see cref="IdPrefix" />.
        /// </summary>
        /// <param name="idPrefix">The new <see cref="IdPrefix" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="WriteEventsWithUtcTimestampIdOp" /> using the specified <paramref name="idPrefix" /> for <see cref="IdPrefix" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public WriteEventsWithUtcTimestampIdOp DeepCloneWithIdPrefix(string idPrefix)
        {
            var result = new WriteEventsWithUtcTimestampIdOp(
                                 idPrefix,
                                 this.EventsToPut?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="EventsToPut" />.
        /// </summary>
        /// <param name="eventsToPut">The new <see cref="EventsToPut" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="WriteEventsWithUtcTimestampIdOp" /> using the specified <paramref name="eventsToPut" /> for <see cref="EventsToPut" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public WriteEventsWithUtcTimestampIdOp DeepCloneWithEventsToPut(IReadOnlyCollection<EventToPutWithId<string>> eventsToPut)
        {
            var result = new WriteEventsWithUtcTimestampIdOp(
                                 this.IdPrefix?.DeepClone(),
                                 eventsToPut);

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        protected override OperationBase DeepCloneInternal()
        {
            var result = new WriteEventsWithUtcTimestampIdOp(
                                 this.IdPrefix?.DeepClone(),
                                 this.EventsToPut?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"Naos.Reactor.Domain.WriteEventsWithUtcTimestampIdOp: IdPrefix = {this.IdPrefix?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, EventsToPut = {this.EventsToPut?.ToString() ?? "<null>"}.");

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override IReadOnlyList<ValidationFailure> GetValidationFailures(
            ValidationOptions options = null,
            PropertyPathTracker propertyPathTracker = null)
        {
            options = options ?? new ValidationOptions();
            propertyPathTracker = propertyPathTracker ?? new PropertyPathTracker();

            bool stopOnFirstObjectWithFailures;
            switch (options.ValidateUntil)
            {
                case ValidateUntil.FullyTraversed:
                    stopOnFirstObjectWithFailures = false;
                    break;
                case ValidateUntil.FirstInvalidObject:
                    stopOnFirstObjectWithFailures = true;
                    break;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(ValidateUntil)} is not supported: {options.ValidateUntil}."));
            }

            bool validateProperties;
            switch (options.ValidationScope)
            {
                case ValidationScope.SelfAndProperties:
                    validateProperties = true;
                    break;
                case ValidationScope.SelfOnly:
                    validateProperties = false;
                    break;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(ValidationScope)} is not supported: {options.ValidationScope}."));
            }

            var result = new List<ValidationFailure>();

            void ValidateProperties()
            {
                IReadOnlyList<ValidationFailure> localValidationFailures;

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.IdPrefix, options, propertyPathTracker, nameof(this.IdPrefix));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.EventsToPut, options, propertyPathTracker, nameof(this.EventsToPut));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }
            }

            void ValidateSelf()
            {
                var segmentSeparator = propertyPathTracker.HasSegments ? propertyPathTracker.SegmentSeparator : string.Empty;

                var selfValidationFailures = (this.GetSelfValidationFailures() ?? new SelfValidationFailure[0])
                    .Where(_ => _ != null)
                    .Select(_ =>
                    {
                        var propertyNames = _.PropertyNames.Count > 1
                            ? Invariant($"({string.Join("|", _.PropertyNames)})")
                            : _.PropertyNames.Single();

                        return new ValidationFailure(
                            this.GetType().ToStringReadable(),
                            Invariant($"{propertyPathTracker.FullPath}{segmentSeparator}{propertyNames}"),
                            _.Message);
                    })
                    .ToList();

                result.AddRange(selfValidationFailures);
            }

            if (options.ValidationOrder == ValidationOrder.PropertiesThenSelf)
            {
                if (validateProperties)
                {
                    ValidateProperties();
                }

                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return result;
                }

                ValidateSelf();
            }
            else if (options.ValidationOrder == ValidationOrder.SelfThenProperties)
            {
                ValidateSelf();

                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return result;
                }

                if (validateProperties)
                {
                    ValidateProperties();
                }
            }
            else
            {
                throw new NotSupportedException(Invariant($"This {nameof(ValidationOrder)} is not supported: {options.ValidationOrder}."));
            }

            return result;
        }

        /// <inheritdoc />
        public override IReadOnlyList<SelfValidationFailure> GetSelfValidationFailures()
        {
            var result = base.GetSelfValidationFailures();

            return result;
        }
    }
}