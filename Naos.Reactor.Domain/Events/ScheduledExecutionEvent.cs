// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ScheduledExecutionEvent.cs" company="Naos Project">
//    Copyright (c) Naos Project 2019. All rights reserved.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Reactor.Domain
{
    using System;
    using System.Collections.Generic;
    using Naos.Cron;
    using OBeautifulCode.Assertion.Recipes;
    using OBeautifulCode.Type;

    /// <summary>
    /// Generated by a <see cref="ExecuteOpOnScheduleOp"/> execution determining an execution is necessary.
    /// </summary>
    public partial class ScheduledExecutionEvent : EventBase<string>, IHaveTags
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledExecutionEvent"/> class.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <param name="operationExecuted">The <see cref="IVoidOperation"/> executed.</param>
        /// <param name="schedule">The <see cref="ISchedule"/> evaluated.</param>
        /// <param name="previousExecutionTimestampUtc">The previous execution timestamp in UTC format.</param>
        /// <param name="timestampUtc">The timestamp of the event in UTC format.</param>
        /// <param name="tags">The tags associated with the reaction.</param>
        public ScheduledExecutionEvent(
            string id,
            IVoidOperation operationExecuted,
            ISchedule schedule,
            DateTime? previousExecutionTimestampUtc,
            DateTime timestampUtc,
            IReadOnlyCollection<NamedValue<string>> tags = null) : base(id, timestampUtc)
        {
            operationExecuted.MustForArg(nameof(operationExecuted)).NotBeNull();
            schedule.MustForArg(nameof(schedule)).NotBeNull();
            previousExecutionTimestampUtc.MustForArg(nameof(previousExecutionTimestampUtc)).BeUtcDateTimeWhenNotNull();

            this.OperationExecuted = operationExecuted;
            this.Schedule = schedule;
            this.PreviousExecutionTimestampUtc = previousExecutionTimestampUtc;
            this.Tags = tags;
        }

        /// <summary>
        /// Gets the operation that was executed.
        /// </summary>
        public IVoidOperation OperationExecuted { get; private set; }

        /// <summary>
        /// Gets the schedule evaluated.
        /// </summary>
        public ISchedule Schedule { get; private set; }

        /// <summary>
        /// Gets the previous execution timestamp UTC.
        /// </summary>
        public DateTime? PreviousExecutionTimestampUtc { get; private set; }

        /// <inheritdoc />
        public IReadOnlyCollection<NamedValue<string>> Tags { get; private set; }
    }
}
