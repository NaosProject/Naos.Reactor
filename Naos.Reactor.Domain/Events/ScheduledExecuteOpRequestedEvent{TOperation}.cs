// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ScheduledExecuteOpRequestedEvent{TOperation}.cs" company="Naos Project">
//    Copyright (c) Naos Project 2019. All rights reserved.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Reactor.Domain
{
    using System;
    using System.Collections.Generic;
    using Naos.Cron;
    using OBeautifulCode.Assertion.Recipes;
    using OBeautifulCode.Type;

    /// <summary>
    /// Generated by a <see cref="ProcessScheduledOpRegistrationsOp"/> execution determining an execution is necessary.
    /// </summary>
    public partial class ScheduledExecuteOpRequestedEvent<TOperation> : EventBase<string>, IHaveTags, IHaveDetails where TOperation : IVoidOperation
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledExecuteOpRequestedEvent{TOperation}" /> class.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <param name="operationToExecute">The <see cref="IVoidOperation"/> executed.</param>
        /// <param name="minimumTimeBeforeExecutionUtc">The previous execution timestamp in UTC format.</param>
        /// <param name="timestampUtc">The timestamp of the event in UTC format.</param>
        /// <param name="details">The optional details of the scheduled operation.</param>
        /// <param name="tags">The tags associated with the scheduled operation.</param>
        public ScheduledExecuteOpRequestedEvent(
            string id,
            TOperation operationToExecute,
            DateTime minimumTimeBeforeExecutionUtc,
            DateTime timestampUtc,
            string details = null,
            IReadOnlyCollection<NamedValue<string>> tags = null) : base(id, timestampUtc)
        {
            operationToExecute.MustForArg(nameof(operationToExecute)).NotBeNull();
            minimumTimeBeforeExecutionUtc.MustForArg(nameof(minimumTimeBeforeExecutionUtc)).BeUtcDateTimeWhenNotNull();

            this.OperationToExecute = operationToExecute;
            this.MinimumTimeBeforeExecutionUtc = minimumTimeBeforeExecutionUtc;
            this.Details = details;
            this.Tags = tags;
        }

        /// <summary>
        /// Gets the operation that was executed.
        /// </summary>
        public TOperation OperationToExecute { get; private set; }

        /// <summary>
        /// Gets the minimum time in UTC format before the operation should be executed.
        /// </summary>
        public DateTime MinimumTimeBeforeExecutionUtc { get; private set; }

        /// <inheritdoc />
        public IReadOnlyCollection<NamedValue<string>> Tags { get; private set; }

        /// <inheritdoc />
        public string Details { get; private set; }
    }
}
