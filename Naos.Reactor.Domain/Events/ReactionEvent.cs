// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ReactionEvent.cs" company="Naos Project">
//    Copyright (c) Naos Project 2019. All rights reserved.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Reactor.Domain
{
    using System;
    using System.Collections.Generic;
    using Naos.Database.Domain;
    using OBeautifulCode.Assertion.Recipes;
    using OBeautifulCode.Representation.System;
    using OBeautifulCode.Type;

    /// <summary>
    /// Generated by a <see cref="ReactionRegistration"/> finding records to handle.
    /// </summary>
    public partial class ReactionEvent : EventBase<string>, IHaveTags
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReactionEvent"/> class.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <param name="reactionRegistrationId">The identifier of the <see cref="ReactionRegistration"/> which generated the reaction.</param>
        /// <param name="reactionContext">The context provided by the <see cref="ReactionRegistration"/> evaluated.</param>
        /// <param name="streamRepresentationToInternalRecordIdsMap">The <see cref="IStreamRepresentation"/> to list of internal record identifiers that were evaluated by the reaction.</param>
        /// <param name="timestampUtc">The timestamp of the event in UTC format.</param>
        /// <param name="tags">The tags associated with the reaction.</param>
        public ReactionEvent(
            string id,
            string reactionRegistrationId,
            IReactionContext reactionContext,
            IReadOnlyDictionary<IStreamRepresentation, IReadOnlyList<long>> streamRepresentationToInternalRecordIdsMap,
            DateTime timestampUtc,
            IReadOnlyCollection<NamedValue<string>> tags = null) : base(id, timestampUtc)
        {
            id.MustForArg(nameof(id)).NotBeNullNorWhiteSpace();
            reactionRegistrationId.MustForArg(nameof(reactionRegistrationId)).NotBeNullNorWhiteSpace();
            reactionContext.MustForArg(nameof(reactionContext)).NotBeNull();
            streamRepresentationToInternalRecordIdsMap.MustForArg(nameof(streamRepresentationToInternalRecordIdsMap)).NotBeNull().And().NotContainAnyKeyValuePairsWithNullValue();
            timestampUtc.MustForArg(nameof(timestampUtc)).BeUtcDateTime();
            tags.MustForArg(nameof(tags)).NotContainAnyNullElementsWhenNotNull();

            this.ReactionRegistrationId = reactionRegistrationId;
            this.ReactionContext = reactionContext;
            this.StreamRepresentationToInternalRecordIdsMap = streamRepresentationToInternalRecordIdsMap;
            this.Tags = tags;
        }

        /// <summary>
        /// Gets the identifier of the <see cref="ReactionRegistration"/> which generated the reaction.
        /// </summary>
        /// <value>The identifier of the <see cref="ReactionRegistration"/> which generated the reaction.</value>
        public string ReactionRegistrationId { get; private set; }

        /// <summary>
        /// Gets the reaction context provided from the <see cref="ReactionRegistration"/>.
        /// </summary>
        public IReactionContext ReactionContext { get; private set; }

        /// <summary>
        /// The <see cref="IStreamRepresentation"/> to list of internal record identifiers that were evaluated by the reaction.
        /// </summary>
        public IReadOnlyDictionary<IStreamRepresentation, IReadOnlyList<long>> StreamRepresentationToInternalRecordIdsMap { get; private set; }

        /// <inheritdoc />
        public IReadOnlyCollection<NamedValue<string>> Tags { get; private set; }
    }
}
