// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.177.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Reactor.Domain
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::Naos.Database.Domain;

    using global::OBeautifulCode.Cloning.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class EventToPutWithIdOnHandlingStatusMatch<TId> : IModel<EventToPutWithIdOnHandlingStatusMatch<TId>>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="EventToPutWithIdOnHandlingStatusMatch{TId}"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(EventToPutWithIdOnHandlingStatusMatch<TId> left, EventToPutWithIdOnHandlingStatusMatch<TId> right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="EventToPutWithIdOnHandlingStatusMatch{TId}"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(EventToPutWithIdOnHandlingStatusMatch<TId> left, EventToPutWithIdOnHandlingStatusMatch<TId> right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(EventToPutWithIdOnHandlingStatusMatch<TId> other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.StatusToMatch.IsEqualTo(other.StatusToMatch)
                      && this.CompositeHandlingStatusMatchStrategy.IsEqualTo(other.CompositeHandlingStatusMatchStrategy)
                      && this.EventToPut.IsEqualTo(other.EventToPut)
                      && this.MatchTerminatesChain.IsEqualTo(other.MatchTerminatesChain)
                      && this.MatchTerminatesExecution.IsEqualTo(other.MatchTerminatesExecution);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as EventToPutWithIdOnHandlingStatusMatch<TId>);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.StatusToMatch)
            .Hash(this.CompositeHandlingStatusMatchStrategy)
            .Hash(this.EventToPut)
            .Hash(this.MatchTerminatesChain)
            .Hash(this.MatchTerminatesExecution)
            .Value;

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public EventToPutWithIdOnHandlingStatusMatch<TId> DeepClone()
        {
            var result = new EventToPutWithIdOnHandlingStatusMatch<TId>(
                                 this.StatusToMatch.DeepClone(),
                                 this.CompositeHandlingStatusMatchStrategy.DeepClone(),
                                 this.EventToPut?.DeepClone(),
                                 this.MatchTerminatesChain.DeepClone(),
                                 this.MatchTerminatesExecution.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="StatusToMatch" />.
        /// </summary>
        /// <param name="statusToMatch">The new <see cref="StatusToMatch" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="EventToPutWithIdOnHandlingStatusMatch{TId}" /> using the specified <paramref name="statusToMatch" /> for <see cref="StatusToMatch" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public EventToPutWithIdOnHandlingStatusMatch<TId> DeepCloneWithStatusToMatch(CompositeHandlingStatus statusToMatch)
        {
            var result = new EventToPutWithIdOnHandlingStatusMatch<TId>(
                                 statusToMatch,
                                 this.CompositeHandlingStatusMatchStrategy.DeepClone(),
                                 this.EventToPut?.DeepClone(),
                                 this.MatchTerminatesChain.DeepClone(),
                                 this.MatchTerminatesExecution.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="CompositeHandlingStatusMatchStrategy" />.
        /// </summary>
        /// <param name="compositeHandlingStatusMatchStrategy">The new <see cref="CompositeHandlingStatusMatchStrategy" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="EventToPutWithIdOnHandlingStatusMatch{TId}" /> using the specified <paramref name="compositeHandlingStatusMatchStrategy" /> for <see cref="CompositeHandlingStatusMatchStrategy" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public EventToPutWithIdOnHandlingStatusMatch<TId> DeepCloneWithCompositeHandlingStatusMatchStrategy(CompositeHandlingStatusMatchStrategy compositeHandlingStatusMatchStrategy)
        {
            var result = new EventToPutWithIdOnHandlingStatusMatch<TId>(
                                 this.StatusToMatch.DeepClone(),
                                 compositeHandlingStatusMatchStrategy,
                                 this.EventToPut?.DeepClone(),
                                 this.MatchTerminatesChain.DeepClone(),
                                 this.MatchTerminatesExecution.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="EventToPut" />.
        /// </summary>
        /// <param name="eventToPut">The new <see cref="EventToPut" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="EventToPutWithIdOnHandlingStatusMatch{TId}" /> using the specified <paramref name="eventToPut" /> for <see cref="EventToPut" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public EventToPutWithIdOnHandlingStatusMatch<TId> DeepCloneWithEventToPut(EventToPutWithId<TId> eventToPut)
        {
            var result = new EventToPutWithIdOnHandlingStatusMatch<TId>(
                                 this.StatusToMatch.DeepClone(),
                                 this.CompositeHandlingStatusMatchStrategy.DeepClone(),
                                 eventToPut,
                                 this.MatchTerminatesChain.DeepClone(),
                                 this.MatchTerminatesExecution.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="MatchTerminatesChain" />.
        /// </summary>
        /// <param name="matchTerminatesChain">The new <see cref="MatchTerminatesChain" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="EventToPutWithIdOnHandlingStatusMatch{TId}" /> using the specified <paramref name="matchTerminatesChain" /> for <see cref="MatchTerminatesChain" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public EventToPutWithIdOnHandlingStatusMatch<TId> DeepCloneWithMatchTerminatesChain(bool matchTerminatesChain)
        {
            var result = new EventToPutWithIdOnHandlingStatusMatch<TId>(
                                 this.StatusToMatch.DeepClone(),
                                 this.CompositeHandlingStatusMatchStrategy.DeepClone(),
                                 this.EventToPut?.DeepClone(),
                                 matchTerminatesChain,
                                 this.MatchTerminatesExecution.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="MatchTerminatesExecution" />.
        /// </summary>
        /// <param name="matchTerminatesExecution">The new <see cref="MatchTerminatesExecution" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="EventToPutWithIdOnHandlingStatusMatch{TId}" /> using the specified <paramref name="matchTerminatesExecution" /> for <see cref="MatchTerminatesExecution" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public EventToPutWithIdOnHandlingStatusMatch<TId> DeepCloneWithMatchTerminatesExecution(bool matchTerminatesExecution)
        {
            var result = new EventToPutWithIdOnHandlingStatusMatch<TId>(
                                 this.StatusToMatch.DeepClone(),
                                 this.CompositeHandlingStatusMatchStrategy.DeepClone(),
                                 this.EventToPut?.DeepClone(),
                                 this.MatchTerminatesChain.DeepClone(),
                                 matchTerminatesExecution);

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"Naos.Reactor.Domain.{this.GetType().ToStringReadable()}: StatusToMatch = {this.StatusToMatch.ToString() ?? "<null>"}, CompositeHandlingStatusMatchStrategy = {this.CompositeHandlingStatusMatchStrategy.ToString() ?? "<null>"}, EventToPut = {this.EventToPut?.ToString() ?? "<null>"}, MatchTerminatesChain = {this.MatchTerminatesChain.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, MatchTerminatesExecution = {this.MatchTerminatesExecution.ToString(CultureInfo.InvariantCulture) ?? "<null>"}.");

            return result;
        }
    }
}